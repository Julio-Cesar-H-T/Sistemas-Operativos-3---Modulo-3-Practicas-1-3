========================================================================================
========================================================================================
||| Comandos utilizados, práctica laboratorio 3.1                                    |||
|||Edición de GRUB2, recuperación de CONTRASEÑA ROOT                                 |||
========================================================================================
========================================================================================

—Ingresar al archivo de configuración del menú Grub2—

sudo nano /etc/default/grub

—Al ver la línea de configuración "GRUB_TIMEOUT=5", cambiamos el número 5 (segundos) por el que queramos configurar (20). Ctrl + O para guardar, Ctrl + X para salir. Luego, actualizamos la configuración de Grub—

sudo grub2-mkconfig -o /boot/grub2/grub.cfg

—Luego, para ingresar al menú Grub y recuperar la contraseña Root, reiniciamos la máquina. Tan pronto como veamos el menú, presionamos la letra "e" en el teclado—

—Al ingresar al menú, ubicamos el cursor en la línea qué inicia con la palabra "linux /vmlinuz-...". Para ir hasta donde dice "ro" y cambiar la o por una "w", luego vas hacia el final de dicha línea, presionamos y agregamos "init=/bin/bash". Luego, presionamos Ctrl + X para ejecutar el menú con las nuevas configuraciones —

—Al cargar el sistema como bash root cambiamos la contraseña—

passwd

—Luego de ello, escribimos y reescribimos la nueva contraseña de Root. Después, opcional pero recomendado, actualizamos el contexto SELinux—

touch /.autorelabel

—Para salir del modo de recuperación y que el sistema se reinicie automaticamente—

exec /sbin/init



========================================================================================
========================================================================================
|||Comandos utilizados, práctica laboratorio 3.2:                                    |||
|||SHELL SCRIPTING en ROCKY LINUX                                                    |||
========================================================================================
========================================================================================

—Para crear el primer shell code: hacer un backup de los archivos /home/usuario y guardar dicho backup con la hora y fecha exactas en el nombre—

nano backup_home.sh

—Dentro del archivo, colocamos el script (un backup de /home/usuario con fecha y hora en el nombre)—

#!/bin/bash
FECHA=$(date +"%d-%m-%Y:%H:%M")
tar -cvzf /home/$(whoami)/backup_home_$FECHA.tar.gz /home/$(whoami)

—Guardamos y cerramos el editor (Ctrl + O, Ctrl + X). Luego, damos permisos de ejecución—

chmod +x backup_home.sh

—Ejecutamos el script—

./backup_home.sh

—Para comprobar la efectividad de la ejecución, listamos los archivos existentes dentro de la carpeta usuario—

cd /home/usuario 
ls -l

—Para crear el segundo shell code: crear un archivo txt con el resultado del comando ifconfig, que se guarde en el escritorio y que nos pregunte qué nombre deseamos poner al archivo—

sudo nano Iftest.sh

—Dentro del documento, colocamos el bash—

#!/bin/bash
read -p "Ingrese el nombre del archivo: " nombre
ifconfig > /home/$(whoami)/Desktop/"$nombre".txt
echo "El archivo se ha guardado en el escritorio con el nombre $nombre.txt"

—Salimos del documento y agregamos permisos de ejecución—

sudo chmod +× Iftest.sh

#Ejecutar el script:

./ifconfig.sh

—Nos preguntará en nombre que queremos asignar al archivo de texto. En este caso Iftest.txt. Para verificar que el archivo existe y contiene el contenido correcto, hacemos lo siguiente—

cd Desktop
ls -l
cat Iftest.txt




========================================================================================
========================================================================================
|||Comandos utilizados, práctica laboratorio 3.3:                                     |||
||| Servicio SSH en ROCKY y WINDOWS                                                   |||
========================================================================================
========================================================================================

—Para conectarnos con el servicio ssh, luego de asegurarnos que nuestras máquinas hacen ping entre ellas, y que los firewalls no interfieran (en este caso la vm Rocky y la física Windows), descargamos la herramienta en nuestro Linux—

sudo dnf install openssh-server

—Habilitar y encender el servicio—

sudo systemctl start sshd
sudo systemctl enable sshd

—Verificar el estatus del servicio—

sudo systemctl status sshd

—Ya que tenemos el servicio activo y las máquinas hacen ping, nos dirigimos a la terminal desde la que manejaremos la otra máquina de forma remota (en este caso la Windows). Colocamos el usuario a manejar y la ip de la máquina—

ssh jtibrey@10.0.0.45

—colocamos la contraseña de dicho usuario Linux. Podemos utilizar varios comandos para comprobar que estamos dentro de la terminal opuesta—

ls
ls -l

#Para cerrar la conexión:

exit

—Para generar un par de llaves ssh (desde windows)—

ssh-keygen

—Luego de que las llaves están generadas, copiamos la pública. Lo podemos hacer abriendo el archivo en un notepad y copiando el contenido—

notepad C:/users/usuario/dirección_de_la_llave

—Luego, vamos a nuestra máquina Rocky a pegar la llave pública de Windows, y así ingresar sin contraseña de forma remota. Para eso, si no tenemos el archivo de llaves autorizadas, lo creamos—

cd .ssh (verificar si está)

(si no está)
mkdir .ssh
cd .ssh


sudo nano authorized_keys

—Allí pegamos la llave pública copiado anteriormente. Guardamos, salimos, y volvemos a la Windows para el proceso de conexión—

ssh jtibrey@10.0.0.45

—Si la llave fue compartida correctamente, la conexión iniciará sin contraseña requerida—
